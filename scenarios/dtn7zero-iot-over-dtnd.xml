<?xml version='1.0' encoding='UTF-8'?>
<scenario name="/tmp/tmpgvjzack7">
  <networks>
    <network id="3" name="AdHocWiFi" icon="" canvas="0" type="WIRELESS_LAN">
      <position x="434.8962707519531" y="237.01507568359375" lat="47.57784503870517" lon="-122.12873001825336" alt="2.0"/>
    </network>
  </networks>
  <devices>
    <device id="1" name="iot-node" icon="" canvas="0" type="DTN7ZERO" class="" image="">
      <position x="277.48052978515625" y="319.11846923828125" lat="47.57738729945125" lon="-122.13003098074121" alt="2.0"/>
      <services>
        <service name="dtn7zero"/>
      </services>
    </device>
    <device id="2" name="plot-node-1" icon="" canvas="0" type="DTN7ZERO" class="" image="">
      <position x="603.2598266601562" y="316.0408630371094" lat="47.57740445765912" lon="-122.12733857754222" alt="2.0"/>
      <services>
        <service name="dtn7zero"/>
      </services>
    </device>
    <device id="4" name="relay-node" icon="" canvas="0" type="DTN" class="" image="">
      <position x="439.0705261230469" y="423.32073974609375" lat="47.57680634974143" lon="-122.12869552011729" alt="2.0"/>
      <services>
        <service name="dtnecho"/>
        <service name="dtnd"/>
        <service name="DefaultMulticastRoute"/>
      </services>
    </device>
    <device id="5" name="plot-node-2" icon="" canvas="0" type="DTN7ZERO" class="" image="">
      <position x="725.7291870117188" y="644.9559936523438" lat="47.5755706648621" lon="-122.12632642943841" alt="2.0"/>
      <services>
        <service name="dtn7zero"/>
      </services>
    </device>
  </devices>
  <links>
    <link node1="3" node2="1">
      <iface2 id="0" name="eth0" mac="00:00:00:aa:00:00" ip4="10.0.0.20" ip4_mask="24" ip6="2001::14" ip6_mask="128"/>
    </link>
    <link node1="3" node2="2">
      <iface2 id="0" name="eth0" mac="00:00:00:aa:00:01" ip4="10.0.0.21" ip4_mask="24" ip6="2001::15" ip6_mask="128"/>
    </link>
    <link node1="3" node2="4">
      <iface2 id="0" name="eth0" mac="00:00:00:aa:00:02" ip4="10.0.0.22" ip4_mask="24" ip6="2001::16" ip6_mask="128"/>
    </link>
    <link node1="3" node2="5">
      <iface2 id="0" name="eth0" mac="00:00:00:aa:00:03" ip4="10.0.0.23" ip4_mask="24" ip6="2001::17" ip6_mask="128"/>
    </link>
  </links>
  <mobility_configurations>
    <mobility_configuration node="3" model="basic_range">
      <configuration name="range" value="275"/>
      <configuration name="bandwidth" value="54000000"/>
      <configuration name="jitter" value="0"/>
      <configuration name="delay" value="5000"/>
      <configuration name="error" value="0"/>
      <configuration name="promiscuous" value="0"/>
    </mobility_configuration>
  </mobility_configurations>
  <emane_global_configuration>
    <emulator/>
    <core>
      <configuration name="platform_id_start" value="1"/>
      <configuration name="nem_id_start" value="1"/>
      <configuration name="link_enabled" value="1"/>
      <configuration name="loss_threshold" value="30"/>
      <configuration name="link_interval" value="1"/>
      <configuration name="link_timeout" value="4"/>
    </core>
  </emane_global_configuration>
  <service_configurations>
    <service name="dtn7zero" node="1">
      <startups>
        <startup>bash -c 'PYTHONUNBUFFERED=TRUE python3 ./start-dtn7zero.py &amp;&gt; dtn7zero.log'</startup>
      </startups>
      <files>
        <file name="start-dtn7zero.py"><![CDATA[#!/usr/bin/python3

# This script sends temperature-values from the node endpoint 'dtn://iot-node/' to the group endpoint 'dtn://global-iot/~iot-node-temperature-values'

import json
import socket
import sys
import time
import random

from dtn7zero import setup, register, register_group, start_background_update_thread, run_forever
from py_dtn7.bundle import PrimaryBlock


# loads a list of recorded temperature values from DWD, hava a look at 'scripts/parse_weather_data.py' for more information
with open('/app/data/temps.json', 'r') as f:
    temps = json.load(f)


node_id = f'dtn://{socket.gethostname()}/'
node_endpoint = setup(node_id)


start_background_update_thread()


idx = -1

try:
    while True:
        time.sleep(1)
        
        idx = (idx + 1) % len(temps)
        
        node_endpoint.send(f'{temps[idx]}'.encode(), 'dtn://global-iot/~iot-node-temperature-values')
except KeyboardInterrupt:
    pass


]]></file>
      </files>
    </service>
    <service name="dtn7zero" node="2">
      <startups>
        <startup>bash -c "export DISPLAY=:1.0 &amp;&amp; sleep 2 &amp;&amp; xterm -e 'PYTHONUNBUFFERED=TRUE python3 ./start-dtn7zero.py &amp;&gt; dtn7zero.log'"</startup>
      </startups>
      <files>
        <file name="start-dtn7zero.py"><![CDATA[#!/usr/bin/python3

# This script receives temperature values from the group endpoint 'dtn://global-iot/~iot-node-temperature-values' and plots them in a diagram

import socket
import sys
import matplotlib.pyplot as plt
import matplotlib.ticker as mtick

from dtn7zero import setup, register, register_group, start_background_update_thread, run_forever
from py_dtn7.bundle import PrimaryBlock
from py_dtn7.utils import from_dtn_timestamp


def get_label(value: int, position) -> str:
    return from_dtn_timestamp(value).strftime("%H:%M:%S")

value_dict = {}

plt.ion()
fig, ax = plt.subplots()
fig.subplots_adjust(bottom=0.2)
fig.suptitle(socket.gethostname())

ax.plot([], [])
plt.xlabel("Time")
plt.ylabel("Temperature (Degrees Celcius)")
fig.canvas.draw()
fig.canvas.flush_events()


node_id = f'dtn://{socket.gethostname()}/'
node_endpoint = setup(node_id)


def callback_group(payload: bytes, full_source_uri: str, full_destination_uri: str, primary_block: PrimaryBlock):
    value_dict[primary_block.bundle_creation_time] = float(payload.decode())
    
    timestamps, temperatures = zip(*sorted(value_dict.items()))
    
    ax.clear()
    ax.plot(timestamps, temperatures)
    ax.xaxis.set_major_formatter(mtick.FuncFormatter(get_label))
    plt.setp(ax.get_xticklabels(), rotation=90, ha='right')
    plt.xlabel("Time")
    plt.ylabel("Temperature (Degrees Celcius)")
    fig.canvas.draw()
    fig.canvas.flush_events()

    print(f'received group message {payload.decode()} from {full_source_uri} addressed to {full_destination_uri}')

group_endpoint = register_group('dtn://global-iot/~iot-node-temperature-values', callback_group)


def main():
    pass

run_forever(main, loop_callback_interval_milliseconds=1000)


]]></file>
      </files>
    </service>
    <service name="dtnd" node="4">
      <startups>
        <startup>bash -c 'dtnd -c dtnd.toml &amp;&gt; dtnd.log'</startup>
      </startups>
      <files>
        <file name="dtnd.toml"><![CDATA[# auto-generated by DtndService (dtnd.py)

# Example config file for dtn7 daemon
debug = false
nodeid = "n4"
# Enables advertisement of the beaon period in discovery beacons
beacon-period = true

generate-status-reports = false

webport = 3000

workdir = "."

db = "mem"

[routing]
strategy = "epidemic"

[core]
# the janitor is responsible for cleaning the bundle buffer
# and schedule resubmissions.
# a value of 0 deactives the janitor
janitor = "10s"


[discovery]
# interval of 0 deactives discovery service
interval = "2s"
peer-timeout = "20s"

[convergencylayers]

cla.0.id = "mtcp"
cla.0.port = 16163

# Define user specified discovery targets to send announcement beacons to, if not specified the default targets "224.0.0.26:3003" for IPv4 and "[FF02::1]:3003" will be used
# If a IPv4 address is specified the IPv4 flag has to be enabled, same goes for specifying an IPv6 address
[discovery_destinations]
#
target.0.destination = "10.0.0.255:3003"
#
# target.1.destination = "[FF02::1]:3004"


# Define user specified services that will be advertised with discovery beacons
# Each service takes a u8 tag and a payload value who's content depends on the used tag
#[services]
# So far 4 Tags are defined and can be used like this:
#
# Tag 63 advertises a custom, unformatted string message
# service.0.tag = 63
# service.0.payload = "This is a custom string message"
#
# Tag 127 advertises 2 floating point numbers represented as geographical location in latitude/longitude
# service.1.tag = 127
# service.1.payload = "52.32 24.42"
#
# Tag 191 advertises 1 integer represented as battery level in %
# service.2.tag = 191
# service.1.payload = "75"
#
# Tag 255 advertises an address represented like this: (Street Number PostalNumber City CountryCode)
# service.3.tag = 255
# service.3.payload = "Samplestreet 42 12345 SampleCity SC"

[statics]
#peers = [
#    "mtcp://192.168.2.101/testnode",    
#]

[endpoints]
# local endpoints are always reachable under dtn://<nodeid>/<localname>
#local.0 = "incoming"
#group.0 = "dtn://hometown/weather" # atm ignored

        
]]></file>
      </files>
    </service>
    <service name="dtn7zero" node="5">
      <startups>
        <startup>bash -c "export DISPLAY=:1.0 &amp;&amp; sleep 2 &amp;&amp; xterm -e 'PYTHONUNBUFFERED=TRUE python3 ./start-dtn7zero.py &amp;&gt; dtn7zero.log'"</startup>
      </startups>
      <files>
        <file name="start-dtn7zero.py"><![CDATA[#!/usr/bin/python3

# This script receives temperature values from the group endpoint 'dtn://global-iot/~iot-node-temperature-values' and plots them in a diagram

import socket
import sys
import matplotlib.pyplot as plt
import matplotlib.ticker as mtick

from dtn7zero import setup, register, register_group, start_background_update_thread, run_forever
from py_dtn7.bundle import PrimaryBlock
from py_dtn7.utils import from_dtn_timestamp


def get_label(value: int, position) -> str:
    return from_dtn_timestamp(value).strftime("%H:%M:%S")

value_dict = {}

plt.ion()
fig, ax = plt.subplots()
fig.subplots_adjust(bottom=0.2)
fig.suptitle(socket.gethostname())

ax.plot([], [])
plt.xlabel("Time")
plt.ylabel("Temperature (Degrees Celcius)")
fig.canvas.draw()
fig.canvas.flush_events()


node_id = f'dtn://{socket.gethostname()}/'
node_endpoint = setup(node_id)


def callback_group(payload: bytes, full_source_uri: str, full_destination_uri: str, primary_block: PrimaryBlock):
    value_dict[primary_block.bundle_creation_time] = float(payload.decode())
    
    timestamps, temperatures = zip(*sorted(value_dict.items()))
    
    ax.clear()
    ax.plot(timestamps, temperatures)
    ax.xaxis.set_major_formatter(mtick.FuncFormatter(get_label))
    plt.setp(ax.get_xticklabels(), rotation=90, ha='right')
    plt.xlabel("Time")
    plt.ylabel("Temperature (Degrees Celcius)")
    fig.canvas.draw()
    fig.canvas.flush_events()

    print(f'received group message {payload.decode()} from {full_source_uri} addressed to {full_destination_uri}')

group_endpoint = register_group('dtn://global-iot/~iot-node-temperature-values', callback_group)


def main():
    pass

run_forever(main, loop_callback_interval_milliseconds=1000)


]]></file>
      </files>
    </service>
  </service_configurations>
  <session_origin lat="47.579166412353516" lon="-122.13232421875" alt="2.0" scale="92.0"/>
  <session_options>
    <configuration name="controlnet" value=""/>
    <configuration name="controlnet0" value=""/>
    <configuration name="controlnet1" value=""/>
    <configuration name="controlnet2" value=""/>
    <configuration name="controlnet3" value=""/>
    <configuration name="controlnet_updown_script" value=""/>
    <configuration name="enablerj45" value="1"/>
    <configuration name="preservedir" value="0"/>
    <configuration name="enablesdt" value="0"/>
    <configuration name="sdturl" value="tcp://127.0.0.1:50000/"/>
    <configuration name="ovs" value="0"/>
  </session_options>
  <session_metadata>
    <configuration name="canvas" value="{&quot;gridlines&quot;: false, &quot;dimensions&quot;: [2000, 2000], &quot;canvases&quot;: [{&quot;id&quot;: 1, &quot;wallpaper&quot;: null, &quot;wallpaper_style&quot;: 1, &quot;fit_image&quot;: false}]}"/>
    <configuration name="edges" value="[]"/>
    <configuration name="shapes" value="[{&quot;canvas&quot;: 1, &quot;type&quot;: &quot;text&quot;, &quot;iconcoords&quot;: [434.75765511455734, 102.17853053543303], &quot;label&quot;: &quot;Bundles with temperature values are generated on the iot-node,&quot;, &quot;fontfamily&quot;: &quot;Arial&quot;, &quot;fontsize&quot;: 18, &quot;labelcolor&quot;: &quot;#000000&quot;, &quot;color&quot;: &quot;&quot;, &quot;border&quot;: &quot;#000000&quot;, &quot;width&quot;: 1, &quot;bold&quot;: false, &quot;italic&quot;: false, &quot;underline&quot;: false}, {&quot;canvas&quot;: 1, &quot;type&quot;: &quot;text&quot;, &quot;iconcoords&quot;: [433.75765511455734, 69.89091816027859], &quot;label&quot;: &quot;DTN7ZERO &amp; DTN7-RS&quot;, &quot;fontfamily&quot;: &quot;Arial&quot;, &quot;fontsize&quot;: 20, &quot;labelcolor&quot;: &quot;#000000&quot;, &quot;color&quot;: &quot;&quot;, &quot;border&quot;: &quot;#000000&quot;, &quot;width&quot;: 1, &quot;bold&quot;: true, &quot;italic&quot;: false, &quot;underline&quot;: false}, {&quot;canvas&quot;: 1, &quot;type&quot;: &quot;text&quot;, &quot;iconcoords&quot;: [435.82702445328704, 130.05499438832786], &quot;label&quot;: &quot;forwarded via dtn, and then plotted by the plot-nodes on reception.&quot;, &quot;fontfamily&quot;: &quot;Arial&quot;, &quot;fontsize&quot;: 18, &quot;labelcolor&quot;: &quot;#000000&quot;, &quot;color&quot;: &quot;&quot;, &quot;border&quot;: &quot;#000000&quot;, &quot;width&quot;: 1, &quot;bold&quot;: false, &quot;italic&quot;: false, &quot;underline&quot;: false}]"/>
    <configuration name="hidden" value="[]"/>
  </session_metadata>
  <default_services>
    <node type="mdr">
      <service name="zebra"/>
      <service name="OSPFv3MDR"/>
      <service name="IPForward"/>
    </node>
    <node type="PC">
      <service name="DefaultRoute"/>
    </node>
    <node type="prouter"/>
    <node type="router">
      <service name="zebra"/>
      <service name="OSPFv2"/>
      <service name="OSPFv3"/>
      <service name="IPForward"/>
    </node>
    <node type="host">
      <service name="DefaultRoute"/>
      <service name="SSH"/>
    </node>
  </default_services>
</scenario>
